syntax = "proto3";

package SlurmxGrpc;
option go_package = "/protos";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// All the definitions in this proto file can be found in PublicHeader.h
// They are just protobuf version definitions.

message XdNodeId {
  uint32 partition_id = 1;
  uint32 node_index = 2;
}

message AllocatableResource {
  uint64 cpu_core_limit = 1;
  uint64 memory_limit_bytes = 2;
  uint64 memory_sw_limit_bytes = 3;
}

message DedicatedResource {}

message Resources {
  AllocatableResource allocatable_resource = 1;
}

enum TaskStatus {
  Pending = 0;
  Running = 1;
  Finished = 2;
  Failed = 3;
  Completing = 4;
}

enum TaskType {
  Interactive = 0;
  Batch = 1;
}

message TaskToCtlXd {
  /* -------- Fields that are set at the submission time. ------- */
  google.protobuf.Duration time_limit = 1;

  string partition_name = 2;
  Resources resources = 3;

  TaskType type = 4;

  uint32 uid = 5;

  uint32 task_id = 6;

  uint32 node_num = 8;
  uint32 task_per_node = 9;

  oneof payload {
    BatchTaskAdditionalMeta batch_meta = 10;
    InteractiveTaskAdditionalMeta interactive_meta = 11;
  }
}

message TaskToXd {
  uint32 task_id = 1;
  TaskType type = 2;
  uint32 partition_id = 3;

  Resources resources = 4;

  // If this task is PENDING, start_time is either not set (default constructed)
  // or an estimated start time.
  // If this task is RUNNING, start_time is the actual starting time.
  google.protobuf.Timestamp start_time = 5; // Currently Only used in SlurmCtlXd
  google.protobuf.Duration time_limit = 6;

  uint32 node_num = 7;
  uint32 task_per_node = 8;

  uint32 uid = 9;

  oneof payload {
    BatchTaskAdditionalMeta batch_meta = 10;
    InteractiveTaskAdditionalMeta interactive_meta = 11;
  }
}

message BatchTaskAdditionalMeta {
  string sh_script = 1;
  string output_file_pattern = 3;
}

message InteractiveTaskAdditionalMeta{
  bytes resource_uuid = 1;
}

message PartitionInfo {
  enum PartitionState {
    UP = 0;
    DOWN = 1;
  }

  string hostlist = 1;
  PartitionState state = 2;
  string name = 3;
}

message NodeInfo {
  enum NodeState {
    IDLE = 0;
    DOWN = 1;
  }

  string hostname = 1;
  NodeState state = 2;
}